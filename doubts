Yup.object().shape({
                    creditReferenceNo : Yup.string().required("Credit Reference Number is required")
                    .matches(/^(?!.* {2})[a-zA-Z0-9,@\\/().#&+!, -]+$/, 'Alpha numerics and Special characters are -/,()#&@.+!, single quotes and single space allowed'),
                    creditedAmt : Yup.string()
                                .when('status', {
                                    is: 'approve',
                                    then: (schema) => schema.required('Required'),
                                    otherwise: (schema) => 
                                    schema.optional().nullable()
                                }),
                                // .test('not-zero', 'Amount cann\'t be zero', function(value) {
                                //     const { status } = this.parent;
                                //     if(status === 'approve') {
                                //         return value !== '0' && value !== '0.00' && value !== '00.00'
                                //     }
                                //     return true
                                // }),
                    creditedCurrency : Yup.string()
                                .when('status', {
                                    is: 'approve',
                                    then: (schema) => schema.required('Required'),
                                    otherwise: (schema) => schema.optional().nullable()
                                }),
                    creditedDate : Yup.string()
                                    .when('status', {
                                        is: 'approve',
                                        then: (schema) => schema.required('Date Credited is required'),
                                        otherwise: (schema) => schema.optional().nullable()
                                    }),
                    bankChargesAmt: Yup.number()
                                    .nullable(),
                    bankChargesCurrency: Yup.string().nullable()    
                }).test(
                      'bankCharges-conditional-validation',
                      'Amount and Currency must both be provided' ,
                      function (values) {
                        const {bankChargesAmt, bankChargesCurrency, creditedAmt} = values;
                        const amtPresent = bankChargesAmt !== null && bankChargesAmt !== undefined && bankChargesAmt !== '';
                        const currencyPresent = !!bankChargesCurrency;

                        if(amtPresent && Number(bankChargesAmt) === 0) {
                            return this.createError({
                                path: 'bankChargesAmt',
                                message: 'Amount cann\'t be zero'
                            })
                        }

                        if(!isEmpty(creditedAmt) && Number(creditedAmt) === 0) {
                            return this.createError({
                                path: 'creditedAmt',
                                message: 'Amount cann\'t be zero'
                            })
                        }

                        if((amtPresent && currencyPresent) || (!amtPresent && !currencyPresent)){
                            return true;
                        }
                        return this.createError({
                            path: amtPresent ? 'bankChargesCurrency' : 'bankChargesAmt',
                            message : 'Required'
                        })
                    }
                )
