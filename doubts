doubt - 1
-----------
//mainParent.jsx
const MainParent = memo(() => {
    return (
        <>
            <Box sx={{ bgcolor: 'background.paper', boxShadow: 1, borderRadius: 1}}> 
              <ChildTabTitles handleTabChange={handleTabChange} tabValue={tabValue} />  
              <Tab1 treeHeights={treeHeights} tabValue={tabValue} tabItem={{label:'SAA Header', value: 'saaHeader' }} />
              <Tab3 treeHeights={treeHeights} tabValue = {tabValue} tabItem = {{label:'Body', value: 'body'}} />
            </Box>
        </>
    )
})
// Tab1.jsx
const Tab1 = ({treeHeights, tabItem, tabValue, key}) => {
    const hierSchemaJson = useSelector(getHierSchemaSaaHeader);
    const treeItemExpandedList = useSelector(getTreeExpandSaaHeader);
    if(isEmpty(hierSchemaJson)) return null;
    return (
        <div
            role="tabpanel"
            hidden={!(tabValue === tabItem.value)}
            id={`full-width-tabpanel-saa`}
            aria-labelledby={`full-width-tab-saa`}
        >
        {/* Component used for binding dynamic treeview hierarchy */}
        <ChildTabs tabValue = {tabValue}
            tabItem = {tabItem}
            key = {key} treeHeights = {treeHeights}
            hierSchemaJson = {hierSchemaJson} treeItemExpandedList = {treeItemExpandedList}
            />
        </div>
    )
}

//Tab2
const Tab2 = ({treeHeights, tabItem, tabValue, key}) => {
    const hierSchemaJson = useSelector(getHierSchemaAppHeader);
    const treeItemExpandedList = useSelector(getTreeExpandAppHeader);
    const [loadAppHeader, setLoadAppHeader] = useState(false);
    const dispatch = useDispatch();
   
    useEffect(() => {
        const setAppHdrTimeOut = setTimeout(() => {
            setLoadAppHeader(true);
            dispatch(setTabMaintainance({tabMaintainance: {[SAAHEADER_TAB] : {loaded: true}, [APPHEADER_TAB]: {loaded: true}}}))
        }, 2000)

        return () => {
            clearTimeout(setAppHdrTimeOut);
        }
    }, [])

    if(isEmpty(hierSchemaJson) || !loadAppHeader) return null;
    console.log('appHeaderCheck', new Date());
    return (
        <div
            role="tabpanel"
            hidden={!(tabValue === tabItem.value)}
            id={`full-width-tabpanel-appHead`}
            aria-labelledby={`full-width-tab-$appHead`}
        >
        {/* Component used for binding dynamic treeview hierarchy */}
        <ChildTabs tabValue = {tabValue}
            tabItem = {tabItem}
            key = {key} treeHeights = {treeHeights}
            hierSchemaJson = {hierSchemaJson} treeItemExpandedList = {treeItemExpandedList}
            />
        </div>
    )
}
//Tab3.jsx
const Tab3 = ({treeHeights, tabItem, tabValue, key}) => {
    const hierSchemaJson = useSelector(getHierSchemaBody);
    const treeItemExpandedList = useSelector(getTreeExpandBody);
    const [loadBody, setBody] = useState(false);
    const dispatch = useDispatch();
    const findLoadStatus= useSelector(getTabLoadStatus([BODY_TAB]));
    useEffect(() => {
      if(findLoadStatus) return;
      const setBodyTimeout = setTimeout(() => {
        setBody(true);
        dispatch(setTabMaintainance({tabMaintainance: {[SAAHEADER_TAB] : {loaded: true}, 
          [APPHEADER_TAB]: {loaded: true}, [BODY_TAB] : {loaded: true}}}));
      }, 5000);
      return () => {
         clearTimeout(setBodyTimeout)
      }
    }, [findLoadStatus])

    if(isEmpty(hierSchemaJson) || !loadBody) return null;
    return (
        <div
            role="tabpanel"
            hidden={!(tabValue === tabItem.value)}
            id={`full-width-tabpanel-body`}
            aria-labelledby={`full-width-tab-body`}
        >
             {/* Component used for binding dynamic treeview hierarchy */}
            <ChildTabs tabValue = {tabValue}
                tabItem = {tabItem}
                key = {key} treeHeights = {treeHeights}
                hierSchemaJson = {hierSchemaJson} treeItemExpandedList = {treeItemExpandedList}
                />
        </div>
    )
} 
const ChildTabTitles = ({handleTabChange, tabValue}) => {
    const tabMaintainance = useSelector(getTabMaintainance);
    return (
        <Tabs
        sx={{ color: 'black', minHeight: "35px", height: "35px",
        borderTopLeftRadius: 1, borderTopRightRadius: 1}}
        value={tabValue}
        onChange={handleTabChange}
        indicatorColor="secondary"
        textColor="inherit"
        variant="fullWidth"
        aria-label="full width tabs example"
    >
    {
        MXTabs.map(tabItem => {
          const {errors = [], invisible = true, loaded = false} = tabMaintainance[tabItem.value] || {}
        return (    
            <Tab label={ <Grid sx={{width: '100%', display: 'flex', justifyContent: 'center', flexDirection: 'row'}}>
                            <Typography sx = {{fontWeight: 'bold',minHeight: 0, fontSize: '13px', textTransform: "none"}}>
                                {tabItem.label}
                              </Typography>
                              {
                                  !loaded ? (                   
                                    <IconButton sx={{ width: '5%', marginLeft: '3px'}}>
                                      <SyncLoader color={'#000000'}
                                          loading={true}
                                          size={3}
                                          aria-label="Loading Spinner"
                                          data-testid="loader"/>
                                    </IconButton> 
                                    ) : (
                                    <IconButton onClick={onBadgeClick}>
                                        <Badge sx={{marginLeft: '10px'}} badgeContent = {errors.length}
                                            invisible = { invisible } color="error"/>
                                    </IconButton>
                                )
                              }           
                        </Grid>} 
                value={tabItem.value} 
                disabled = {!loaded}
                className={classes.eachTab}
                sx = {{fontWeight: 'bold',minHeight: 0, fontSize: '11px', textTransform: "none"}} 
                key={`tab_${tabItem.label}`}
                {...a11yProps(tabItem.value)}/>  
        )   
        })
    }
    </Tabs>
    )
}


ChildTabs - Nothing but loading the dynamic treeview structure hierarchy, compared Tab1 & Tab2 with Tab3, Tab3 should be heavy and expanded list of treeview are high
Tab2 - binded fast because expanding list is low.

doubt - 2
------------

network.js
----------------------------

const post = async (url, data, transactionType, transactionSubType) => {
    try {  
        const isoToken = `Bearer ${sessionStorage.getItem(sessionItems.ISOToken)}`; 
        const dataBody = {
            requestHeader : {
                ...RequestHeaders,
                transactionType,
                transactionSubType,
                sourceCountry: sessionStorage.getItem(sessionItems.CountryCode),
                requestor: sessionStorage.getItem(sessionItems.Username)
            },
            requestBody: data
        } 
        const controller = new AbortController();
        const postSignal = controller.signal;
        const authPost = setTimeout(() => {
            controller.abort();
            clearTimeout(authPost);
        }, timeoutAPI);
        const responsePost = await fetch(`${SERVER_ISO_URL}${url}`, {
            method: 'POST',
            body: JSON.stringify(dataBody),
            headers : {
                "Authorization" : isoToken,
                "Content-Type": "application/json",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Origin": "*"
            },
            signal: postSignal // Pass the signal to the fetch options for call outside catch block
        });
        clearTimeout(authPost);
        return responsePost;
    } catch(err) {
        console.log('Error', err);
    }
}

if add throw new Error('timeout') inside setTimeout, it should be reflect current catch only, but i am expecting where ever we called the post method, that parent method's catch should be reflected.

not recommended the callback Function in post method, because i need to add all parent methods whereever the called the post method.

//file2.js
------------------

export const processMakerCheckerActivities = (requestBody) => {
   return dispatch => {
        try {
            network.post(`url`, requestBody)
            .then(response => {
               
            })
            .then(resData => {
                const { responseHeader, responseBody } = resData;
               
            })
            .catch(error => {
                //expecting this catch
            })
        }
        catch(error) {
            //or this catch
        }
   }
}

doubt 3
-----------------

const Tab1 = ({treeHeights, tabItem, tabValue, key, reMounted}) => {
    const hierSchemaJson = useSelector(getHierSchemaSaaHeader);
    const treeItemExpandedList = useSelector(getTreeExpandSaaHeader);
    if(isEmpty(hierSchemaJson)) return null;
    const saaWorkerRef = useRef(null);
    useEffect(() => {
        if(saaWorkerRef.current) saaWorkerRef.current.terminate();
        const saaWorker = new Worker(new URL ('tabWorker.js', import.meta.url));
        saaWorkerRef.current = saaWorker;
        saaWorker.postMessage({tabKey: SAAHEADER_TAB, payload: 'dataForSaaHeader'});
        saaWorker.onmessage = e => {
            // const {result} = e.data;
            // console.log(result)
            // setSaaData(result.payload);
            dispatch(setTabMaintainance({tabName: [SAAHEADER_TAB], data : {loaded: true}}));
        }
        saaWorker.onerror = err => {
            console.log(err);
        }
        return () => {
            if(saaWorkerRef.current) {
                saaWorkerRef.terminate();
                saaWorkerRef.current = null;
            }
        }
      }, [reMounted])
    return (
        <div
            role="tabpanel"
            hidden={!(tabValue === tabItem.value)}
            id={`full-width-tabpanel-saa`}
            aria-labelledby={`full-width-tab-saa`}
        >
        {/* Component used for binding dynamic treeview hierarchy */}
        <ChildTabs tabValue = {tabValue}
            tabItem = {tabItem}
            key = {key} treeHeights = {treeHeights}
            hierSchemaJson = {hierSchemaJson} treeItemExpandedList = {treeItemExpandedList}
            />
        </div>
    )
}

doubt 4
---------------

import * as React from 'react';
import { IconButton } from "@mui/material";
import { makeStyles } from '@mui/styles';
import { FadeLoader } from "react-spinners";

export const useStyles = makeStyles(() => ({
  spinnerContainer: {
    position: 'fixed',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    zIndex: '9999' 
  },
  spinnerOverlay: {
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      height: '100%',
      backgroundColor: 'rgba(0, 0, 0, 0.5)' /* semi-transparent black */
  },
  spinnerDialog: {
      position: 'absolute',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)'
  }
}))

const LoadingViewer = React.memo(function LoadingViewer({loading}) {
    const classes = useStyles();
  
    return (
        <div className={classes.spinnerContainer} style={{ display: loading ? 'block' : 'none' }}>
        <div className={classes.spinnerOverlay} />
        <div className={classes.spinnerDialog}>
             <IconButton>
              <FadeLoader
                color={'#000000'}
                loading={loading}
                aria-label="Loading Spinner"
                data-testid="loader"/>
            </IconButton>
        </div>
      </div>
    )
})
export default LoadingViewer;

doubt 5
--------------

import { Box } from "@mui/material";
import ChildErrorPage from "../errorPage/childErrorPage";
import { TreeView } from "@mui/x-tree-view";
import { Add, Remove } from "@mui/icons-material";
import CustomTreeItem from "./customTreeItem";
import React, { memo, useCallback, useMemo } from "react";
import { useDispatch } from "react-redux";
import { APPHEADER_TAB, BODY_TAB, SAAHEADER_TAB } from "../../constants/mxTempConstants";
import { treeExpandedListSaa } from "./saaHeaderSlice";
import { treeExpandedListApp } from "./appHeaderSlice";
import { treeExpandedListBody } from "./bodySlice";

const ChildTabs = (props) =>
{
  const { tabValue, tabItem, treeHeights, treeItemExpandedList, hierSchemaJson } = props;
  const dispatch = useDispatch();
  
  const renderTreeItem = useMemo((processingData, nodeName) => {
    const childArray = processingData[nodeName];
    const { shortTitle, children, longTitle, nodeLevel,
            type: elementHierName, ...childOthers } = childArray;
    const {isChoiceChildHidden} = childOthers;
    const hasChildren = children ? true : false;
    if(isChoiceChildHidden) return null;

    return (
      <Box
        sx={hasChildren ? {
         // boxShadow: 1,
          borderRadius: 0.5,
          // px: 0.5, // Box Padding
          py: 0.1,
          // border : '#e3e3e3 solid 1px'
        } : {}}
        key={`TreeBox_${shortTitle}`}
      >
        <CustomTreeItem
          key={shortTitle}
          nodeId={nodeLevel}
          labeltext={longTitle}
          hasChildren={hasChildren}
          elementHierName = {elementHierName}
          shortTitle={shortTitle}
          tabName = {tabValue}
          {...childOthers}
          >
          {
            (childOthers.hideChildForRequired !== true)
                && hasChildren 
                && Object.keys(children).map((key, index) => {  
                  return renderTreeItem(children, key)
                })
          }
        </CustomTreeItem>
      </Box>
    )
  },[hierSchemaJson]);

  try {
    return (
        <div
            role="tabpanel"
            hidden={!(tabValue === tabItem.value)}
            id={`full-width-tabpanel-${0}`}
            aria-labelledby={`full-width-tab-${0}`}
        >
        {/* <Box sx={{ bgcolor: 'background.paper', boxShadow: 2, borderRadius: 1, mt: 0.5}}> */}
        <TreeView
          aria-label="summary"
          defaultCollapseIcon={<Remove />}
          defaultExpandIcon={<Add />}
          defaultEndIcon={<div style={{ width: 24 }} />}
          sx={{px: 0.5, py: 0.5, flexGrow: 1, maxWidth: '100%', overflowY: 'auto', 
            maxHeight: treeHeights.max || null, height: treeHeights.height || null, minHeight: treeHeights.min || null}}
          onNodeToggle={onHandleNodeExpand}
          expanded={(treeItemExpandedList && treeItemExpandedList) || []}
        >
          {
            renderTreeItem(hierSchemaJson, Object.keys(hierSchemaJson)[0])
          }
        </TreeView>
      </div>
    )
  }
  catch(err) {
    console.error(err);
    return <ChildErrorPage subTitle = {"common.wentWrong"}/>
  }
}
export default memo(ChildTabs);

// CustomTreeItem.jsx
const CustomTreeItemComponent = React.memo(
      function CustomTreeItem(props) {       
        return <StyledTreeItemRoot
                  suppressContentEditableWarning={true} ContentComponent = {TemplateSubItems}
                  ContentProps = {{contentProps: {...props}}} {...props}
              />;
    }
  )
  
I am using @mui/Treeview for recursive binding.
TemplateSubItems - it is component and inside heavy calculations && lot of sub components are there.

You are suggested react-virtualized package for resolve performance issue.
based on the code, how to utilize the package.

import React, { memo, useCallback, useMemo } from "react";
import { Box } from "@mui/material";
import { List } from 'react-virtualized';
import CustomTreeItem from "./customTreeItem";

const ChildTabs = ({ tabValue, tabItem, treeHeights, treeItemExpandedList, hierSchemaJson }) => {
  const [flattenedData, setFlattenedData] = useMemo(() => flattenTreeData(hierSchemaJson), [hierSchemaJson]);

  // rowRenderer for rendering each tree node
  const rowRenderer = useCallback(({ index, key, style }) => {
    const node = flattenedData[index];
    return (
      <Box key={key} style={style}>
        <CustomTreeItem
          nodeId={node.nodeLevel}
          labeltext={node.longTitle}
          hasChildren={node.hasChildren}
          elementHierName={node.elementHierName}
          shortTitle={node.shortTitle}
          tabName={tabValue}
          {...node.childOthers}
        >
          {/* Render children if expanded and needed */}
        </CustomTreeItem>
      </Box>
    );
  }, [flattenedData, tabValue]);

  return (
    <div
      role="tabpanel"
      hidden={!(tabValue === tabItem.value)}
      id={`full-width-tabpanel-${0}`}
      aria-labelledby={`full-width-tab-${0}`}
    >
      <List
        width={treeHeights.width || '100%'}
        height={treeHeights.height || 400} 
        rowCount={flattenedData.length}
        rowHeight={50} // Customize based on the height of your CustomTreeItem
        rowRenderer={rowRenderer}
      />
    </div>
  );
};

export default memo(ChildTabs);

// Utility function to flatten tree data for virtualized rendering
const flattenTreeData = (treeData) => {
  let flatList = [];
  const traverse = (node, level = 0) => {
    flatList.push({ ...node, nodeLevel: level });
    if (node.children) {
      Object.values(node.children).forEach(child => traverse(child, level + 1));
    }
  };
  traverse(treeData[Object.keys(treeData)[0]]);
  return flatList;
};

npm ERR! 404 Not Found - GET https://registry.npmjs.org/react-virturalized - Not found
npm ERR! 404
npm ERR! 404  'react-virturalized@*' is not in this registry.
