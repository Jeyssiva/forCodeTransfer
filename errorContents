export const onAddNewItems = (hierSchema, hierData, oriHierSchema, parentDets, shortTitle) => {
    let childSchemaObj = hierSchema
    let childDataObj = hierData
    let oriHierSchemaObj = oriHierSchema

    parentDets.slice(0, -1).forEach(item => {
      const iName = typeof item === "number" ? `Item${item}` : item
      childSchemaObj = childSchemaObj[iName].children
      if(typeof item !== "number") oriHierSchemaObj = oriHierSchemaObj[item].children
      if(!isEmpty(childDataObj[item])){
          childDataObj = childDataObj[item]
      } else {
        childDataObj[item] ={}
        childDataObj = childDataObj[item]
      }
    })

    const childDetailsFromOriginalSchema = cloneDeep(oriHierSchemaObj[shortTitle])
    const curDataItem  = childDataObj && childDataObj[shortTitle] ? {...childDataObj[shortTitle]} : null;
    let curParentItem = {...childSchemaObj[shortTitle]};
    const dataObjValidation = {[shortTitle] : {"hierIndex": curParentItem.hierIndex}};

    //If add the item as first time, revert the checkbox settings and choice properties
    if(curParentItem.occuranceObj.count === 0) {
     // dataObjValidation[shortTitle] = {}
      const originalSchema = cloneDeep(childDetailsFromOriginalSchema)
      const numbersList = findNumberwithIndex(curParentItem.parentDetails); 
      reArrangeParentDetailsWithOriginalSchema(originalSchema.children, numbersList, null, null,curParentItem.parentDetails, dataObjValidation[shortTitle]);
      if(originalSchema.isFieldWithMultiEntry){
        curParentItem.children = {'Item0': {...originalSchema.children['Item0'], isRemovableItem: false}}
      } else {
        curParentItem.children = originalSchema.children
      }
      
      if(originalSchema.isFieldWithMultiEntry) childDataObj[shortTitle] = dataObjValidation[shortTitle][0]
      else childDataObj[shortTitle] = dataObjValidation[shortTitle]
    } 
    
    curParentItem.hideChildForRequired = false;
    curParentItem.occuranceObj.count += 1;
    if(curParentItem.occuranceObj.count === 1) curParentItem.occuranceObj.showMinusForSingleItem = true
    else curParentItem.occuranceObj.showMinusForSingleItem = false
    
    if(curParentItem.occuranceObj.count === curParentItem.occuranceObj.maxOccurs){
      curParentItem.occuranceObj.restrictOccurs = true
    }
    
    if(curParentItem.occuranceObj.count >= 3){
      const iIndex = curParentItem.occuranceObj.count - 1
      const newName = `Item${iIndex}`
      //dataObjValidation[shortTitle] = {}
      // get the item0 as first item.
      const firstItemChild = cloneDeep(curParentItem.children['Item0'])
      const newItem = createNewArrayItem(iIndex, curParentItem.parentDetails, curParentItem.nodeLevel);
      if(firstItemChild.children){
        const originalSchema = cloneDeep(childDetailsFromOriginalSchema)
        const numbersList = findNumberwithIndex(curParentItem.parentDetails); 
        reArrangeParentDetailsWithOriginalSchema(originalSchema.children, numbersList, iIndex, 0,curParentItem.parentDetails, 
          dataObjValidation[shortTitle])
        curParentItem.children[newName] = {...newItem, children: originalSchema.children } 
      } else {
         curParentItem.children[newName] = {...firstItemChild, ...newItem}
      }

      // if restrictions.minLength === 1, then add the error type = 3
      let emptyObject = cloneDeep(dataObjValidation[shortTitle]);
      let errorCode = {}
      if(curParentItem.restrictions 
        && curParentItem.restrictions.minLength === 1
        && curParentItem.ismandatoryfield) errorCode = {error: { _text: ERRORCODES['mandatory_min'] }}
      // else if(curParentItem.restrictions 
      //   && curParentItem.restrictions.minLength === 1) errorCode = {error: { _text: ERRORCODES['minLength'] }}
      else if(curParentItem.ismandatoryfield) errorCode =  {error: { _text: ERRORCODES['mandatory'] }}
      if(!isEmpty(errorCode)){
        emptyObject = errorCode;
      }
      // Add the empty object in data json based on the item addition
      childDataObj[shortTitle].push(emptyObject)
    } 
    // if the occurance count >= 2, then the child fields should be come inside items like Item0 and Item1
    else if(curParentItem.occuranceObj.count >= 2){
      let addChildItems = {};   
      const childInfo = cloneDeep(curParentItem.children);     
      for(let i = 0; i < 2; i++){
        const newItemName = `Item${i}`
        const newItem = createNewArrayItem(i, curParentItem.parentDetails, curParentItem.nodeLevel)
        //dataObjValidation[shortTitle] = {}
        if(childInfo && !curParentItem.isFieldWithMultiEntry){
          if(i === 0){   
            reArrangeParentDetailsWithOriginalSchema(childInfo, [], i, 0, curParentItem.parentDetails)
            addChildItems[newItemName] = {...newItem, children: childInfo }
          } else {
            const originalSchema = cloneDeep(childDetailsFromOriginalSchema)
            const numbersList = findNumberwithIndex(curParentItem.parentDetails);
            reArrangeParentDetailsWithOriginalSchema(originalSchema.children, numbersList, i, 0,curParentItem.parentDetails, dataObjValidation[shortTitle])
            addChildItems[newItemName] = {...newItem, children: originalSchema.children }  
          }
        } else {
          const [singleItem] = Object.values(childInfo);
          addChildItems[newItemName] = {...singleItem, ...newItem}
        }
      }

      curParentItem.children = cloneDeep(addChildItems);
      // if restrictions.minLength === 1, then add the error type = 3
      let emptyObject = cloneDeep(dataObjValidation[shortTitle])
      let errorCode = {}
      if(curParentItem.restrictions && curParentItem.restrictions.minLength === 1
        && curParentItem.ismandatoryfield) errorCode = {error: { _text: ERRORCODES['mandatory_min'] }}
      // else if(curParentItem.restrictions 
      //   && curParentItem.restrictions.minLength === 1) errorCode = {error: { _text: ERRORCODES['minLength'] }}
      else if(curParentItem.ismandatoryfield) errorCode =  {error: { _text: ERRORCODES['mandatory'] }}
      if(!isEmpty(errorCode)){
        emptyObject = errorCode;
      }
      // If single data item available, then rearrange the item into array.
      // isFieldWithMultiEntry - It is single field but multipleentries, So is it true, rearrange the item0 into the array. 
      if(curDataItem){
      // childDataObj[shortTitle] = !childSchemaObj[shortTitle].isFieldWithMultiEntry ? [curDataItem] : [curDataItem[0]]
        childDataObj[shortTitle] = [curDataItem]
        childDataObj[shortTitle].push(emptyObject)
      } else {
        // If no data items are found, then create two empty array items.
        childDataObj[shortTitle] = []
        for(let i = 0; i < 2; i++){
          childDataObj[shortTitle].push(emptyObject)
        }
      }
    }
    childSchemaObj[shortTitle] = curParentItem;
    return {hierSchemaResult: hierSchema, hierDataResult: hierData}
}
